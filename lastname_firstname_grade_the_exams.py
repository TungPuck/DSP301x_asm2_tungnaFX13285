# -*- coding: utf-8 -*-
"""lastname_firstname_grade_the_exams.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rro8tnIeGnwDrjMel6DSB-mgpQKqqht6
"""

import numpy as np
try:
  #------------------------------------
  filename = input("Enter a filename:")
  path = "/content/" + filename + ".txt"
  with open(path, "r") as file:
    print(f"Successfully opened {filename}.txt")
    fileList = file.read().splitlines() 

  # --------------------------------------
  def check_id(id): 
    ans = 0
    try:
      for i in range(1, len(id)):
        int(id[i])
      ans = 1 
    except:
      ans= 0

    if len(id) != 9:
      return False
    elif id[0] != 'N':
      return False
    elif id == 0:
      return False
    else:
      return True
  # ---------------------------------------
  def calc_score(x):
    score = 0
    for i in range(0,len(x)):
      if answer_key[i] == x[i]:
        score +=4
      elif x[i] == "":
        None
      else:
        score -=1
    return score
  # ---------------------------------------
  list_score = []
  store = []
  answer_key = ("B,A,D,D,C,B,D,A,C,C,D,B,A,B,A,C,B,D,A,C,A,A,B,D,D").split(",")

  valid = len(fileList)
  invalid = 0
  for line in fileList:
    lineArray = line.split(",")
    id = lineArray[0]
    data = lineArray[1:]
    if len(lineArray) != 26:
      print("Invalid line of data: does not contain exactly 26 values:")
    if check_id(id) == False:
      print("Invalid line of data: N# is invalid")
    if len(lineArray) != 26 or check_id(id) == False:
      invalid +=1		
      valid -=1
    else:
      score = calc_score(data)
      list_score.append(score)
  if invalid == 0:
    print("No errors found!")
    print("***** REPORT *****")
    print(f"Total valid lines of date: {valid}")
    print(f"Total invalid lines of data: {invalid}")
    
  print('Mean score:', np.mean(list_score))
  print('Highest score:', np.max(list_score))
  print('Lowest score:', np.min(list_score))
  print('Range of score:', np.max(list_score) - np.min(list_score) )
  print('Median score:', np.median(list_score))
except Exception as e:
  print("Sorry, I can't find this filename")

